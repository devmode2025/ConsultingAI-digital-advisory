"""ConsultingAI Digital Advisory Firm - Main Entry Point

Epic 1 Story 1.2: UserProxyAgent Foundation
"""
import sys
from pathlib import Path

# Add src to path for imports
sys.path.append(str(Path(__file__).parent))

# Import Story 1.1 components
from agents.test_basic import verify_autogen_integration

# Import Story 1.2 components
from coordination.chief_engagement_manager import (
    demonstrate_chief_engagement_manager, 
    create_chief_engagement_manager
)
from coordination.escalation_system import demonstrate_escalation_system
from interfaces.human_interaction import demonstrate_human_interaction
from utils.logging_config import setup_academic_logging, log_academic_milestone


def display_story_1_2_banner() -> None:
    """Display Story 1.2 banner"""
    print("=" * 70)
    print("üè¢ ConsultingAI Digital Advisory Firm")
    print("üìã Epic 1 Story 1.2: UserProxyAgent Foundation")
    print("=" * 70)
    print("üéØ Focus: Chief Engagement Manager (UserProxyAgent Extension)")
    print("üìä Evaluation Weight: 35% - UserProxyAgent Implementation")
    print("-" * 70)


def validate_story_1_2_acceptance_criteria() -> bool:
    """Validate all Story 1.2 acceptance criteria
    
    Returns:
        True if all criteria pass, False otherwise
    """
    print("üîç Validating Story 1.2 Acceptance Criteria...")
    print()
    
    criteria_results = []
    
    # AC1: Custom UserProxyAgent subclass "ChiefEngagementManager" created
    print("üîß AC1: Testing Chief Engagement Manager (UserProxyAgent subclass)...")
    cem_success = demonstrate_chief_engagement_manager()
    if cem_success:
        print("‚úÖ AC1: Chief Engagement Manager UserProxyAgent subclass - VERIFIED")
        criteria_results.append(True)
    else:
        print("‚ùå AC1: Chief Engagement Manager creation - FAILED")
        criteria_results.append(False)
    
    # AC2: Basic human interaction capabilities implemented
    print("\nüîß AC2: Testing human interaction capabilities...")
    interaction_success = demonstrate_human_interaction()
    if interaction_success:
        print("‚úÖ AC2: Human interaction capabilities - VERIFIED")
        criteria_results.append(True)
    else:
        print("‚ùå AC2: Human interaction capabilities - FAILED")
        criteria_results.append(False)
    
    # AC3: Simple escalation detection logic implemented
    print("\nüîß AC3: Testing escalation detection logic...")
    escalation_success = demonstrate_escalation_system()
    if escalation_success:
        print("‚úÖ AC3: Escalation detection logic - VERIFIED")
        criteria_results.append(True)
    else:
        print("‚ùå AC3: Escalation detection logic - FAILED")
        criteria_results.append(False)
    
    # AC4: Agent coordination with UserProxyAgent facilitation
    print("\nüîß AC4: Testing agent coordination with UserProxyAgent facilitation...")
    
    try:
        # Create Chief Engagement Manager for coordination testing
        manager = create_chief_engagement_manager(
            name="ac4_test_manager",
            human_input_mode="NEVER"  # Automated testing
        )
        
        # Test consultation workflow
        consultation_context = {
            "scenario": "AC4 coordination test",
            "type": "technical_decision",
            "complexity": "medium"
        }
        
        consultation_id = manager.start_consultation(consultation_context)
        
        # Test escalation evaluation with mock agent responses
        mock_responses = [
            {"agent": "test_agent_1", "recommendation": "Option A", "confidence": 0.80},
            {"agent": "test_agent_2", "recommendation": "Option B", "confidence": 0.75}
        ]
        
        escalation_result = manager.evaluate_escalation_need(mock_responses, consultation_context)
        
        # Verify coordination summary
        summary = manager.get_coordination_summary()
        
        assert consultation_id is not None
        assert escalation_result["escalation_tier"] is not None
        assert summary["total_consultations"] > 0
        
        print("‚úÖ AC4: Agent coordination with UserProxyAgent facilitation - VERIFIED")
        criteria_results.append(True)
        
    except Exception as e:
        print(f"‚ùå AC4: Agent coordination facilitation failed: {e}")
        criteria_results.append(False)
    
    # AC5: Comprehensive logging of all agent interactions and human decisions
    print("\nüîß AC5: Testing comprehensive logging...")
    
    # Logging was already setup and tested in previous components
    # Verify logging is working by checking log files
    from utils.logging_config import demonstrate_logging_system
    
    logging_success = demonstrate_logging_system()
    if logging_success:
        print("‚úÖ AC5: Comprehensive logging system - VERIFIED")
        criteria_results.append(True)
    else:
        print("‚ùå AC5: Comprehensive logging system - FAILED")
        criteria_results.append(False)
    
    return all(criteria_results)


def demonstrate_integrated_userproxy_functionality() -> bool:
    """Demonstrate integrated UserProxyAgent functionality for academic evaluation
    
    Returns:
        True if integrated demonstration successful, False otherwise
    """
    print("\nüé≠ Integrated UserProxyAgent Functionality Demonstration")
    print("-" * 50)
    
    try:
        # Create Chief Engagement Manager with full functionality
        manager = create_chief_engagement_manager(
            name="integrated_demo_manager",
            human_input_mode="NEVER",  # Automated for demonstration
            escalation_config={
                "tier_1_threshold": 0.90,
                "tier_2_threshold": 0.70,
                "tier_3_threshold": 0.50
            }
        )
        
        print("üèóÔ∏è  Chief Engagement Manager created with full UserProxyAgent inheritance")
        
        # Demonstrate complex consultation workflow
        consultation_context = {
            "scenario": "API design decision for customer portal",
            "type": "architecture_decision",
            "stakeholders": ["frontend_team", "backend_team", "product_team"],
            "business_impact": "high",
            "technical_complexity": "medium",
            "time_sensitivity": "normal"
        }
        
        # Start consultation
        consultation_id = manager.start_consultation(consultation_context)
        print(f"üìã Consultation started: {consultation_id}")
        
        # Simulate agent responses with varying confidence levels
        agent_responses = [
            {
                "agent": "code_reviewer", 
                "recommendation": "REST API with OpenAPI specification",
                "confidence": 0.85,
                "rationale": "Well-established patterns with good tooling support"
            },
            {
                "agent": "system_architect", 
                "recommendation": "GraphQL API for flexible querying",
                "confidence": 0.75,
                "rationale": "Better performance for complex data relationships"
            },
            {
                "agent": "business_analyst", 
                "recommendation": "REST API for faster development",
                "confidence": 0.80,
                "rationale": "Team familiarity and shorter time to market"
            }
        ]
        
        # Evaluate escalation need
        escalation_result = manager.evaluate_escalation_need(agent_responses, consultation_context)
        
        print(f"‚öñÔ∏è  Escalation evaluation completed:")
        print(f"   ‚Ä¢ Tier: {escalation_result['escalation_tier'].name}")
        print(f"   ‚Ä¢ Confidence: {escalation_result['overall_confidence']:.1%}")
        print(f"   ‚Ä¢ Escalation needed: {escalation_result['escalation_needed']}")
        print(f"   ‚Ä¢ Reasoning: {escalation_result['reasoning']}")
        
        # Get coordination summary
        summary = manager.get_coordination_summary()
        print(f"üìä Coordination summary: {summary['total_consultations']} consultations managed")
        
        # Log academic milestone
        log_academic_milestone(
            "Story 1.2 UserProxyAgent Integration Complete",
            "ChiefEngagementManager",
            {
                "consultation_id": consultation_id,
                "escalation_tier": escalation_result['escalation_tier'].name,
                "confidence": escalation_result['overall_confidence'],
                "academic_requirement": "UserProxyAgent implementation (35% weight)"
            }
        )
        
        print("üéØ Integrated UserProxyAgent functionality demonstration complete!")
        return True
        
    except Exception as e:
        print(f"‚ùå Integrated demonstration failed: {e}")
        return False


def main() -> int:
    """Main entry point for Story 1.2 validation
    
    Returns:
        0 for success, 1 for failure
    """
    # Setup academic logging first
    setup_academic_logging("INFO")
    
    display_story_1_2_banner()
    
    try:
        # Validate Story 1.1 is still working
        print("üîÑ Verifying Story 1.1 foundation...")
        story_1_1_success = verify_autogen_integration()
        if not story_1_1_success:
            print("‚ùå Story 1.1 foundation verification failed")
            return 1
        print("‚úÖ Story 1.1 foundation verified")
        
        # Validate all Story 1.2 acceptance criteria
        success = validate_story_1_2_acceptance_criteria()
        
        if success:
            # Run integrated demonstration
            integrated_success = demonstrate_integrated_userproxy_functionality()
            
            if integrated_success:
                print("\n" + "=" * 70)
                print("üéâ STORY 1.2 IMPLEMENTATION COMPLETE!")
                print("=" * 70)
                print("‚úÖ Custom UserProxyAgent subclass (Chief Engagement Manager) created")
                print("‚úÖ Basic human interaction capabilities implemented")
                print("‚úÖ Simple escalation detection logic working")
                print("‚úÖ Agent coordination with UserProxyAgent facilitation verified")
                print("‚úÖ Comprehensive logging of interactions and decisions")
                print()
                print("üèÜ UserProxyAgent Implementation (35% evaluation weight): READY")
                print("üìã Three-tier escalation system: OPERATIONAL")
                print("ü§ù Human-AI collaboration foundation: ESTABLISHED")
                print()
                print("üöÄ Ready for Story 1.3: Basic Agent Specialization")
                print("   (Code Reviewer, System Architect, Business Analyst agents)")
                return 0
            else:
                print("\n‚ùå Integrated UserProxyAgent demonstration failed")
                return 1
        else:
            print("\n‚ùå Story 1.2 implementation incomplete")
            print("   Please review failed acceptance criteria above")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå Error in Story 1.2 implementation: {e}")
        return 1


if __name__ == "__main__":
    exit(main())
